// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ponderacao_temporal_cenario_cpp
NumericMatrix ponderacao_temporal_cenario_cpp(NumericMatrix serie_temporal, NumericVector kt, int kt_max, int kt_min);
RcppExport SEXP _funcaoSmapCpp_ponderacao_temporal_cenario_cpp(SEXP serie_temporalSEXP, SEXP ktSEXP, SEXP kt_maxSEXP, SEXP kt_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type serie_temporal(serie_temporalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kt(ktSEXP);
    Rcpp::traits::input_parameter< int >::type kt_max(kt_maxSEXP);
    Rcpp::traits::input_parameter< int >::type kt_min(kt_minSEXP);
    rcpp_result_gen = Rcpp::wrap(ponderacao_temporal_cenario_cpp(serie_temporal, kt, kt_max, kt_min));
    return rcpp_result_gen;
END_RCPP
}
// ponderacao_temporal_cpp
NumericVector ponderacao_temporal_cpp(NumericVector serie_temporal, NumericVector kt, int kt_max, int kt_min);
RcppExport SEXP _funcaoSmapCpp_ponderacao_temporal_cpp(SEXP serie_temporalSEXP, SEXP ktSEXP, SEXP kt_maxSEXP, SEXP kt_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type serie_temporal(serie_temporalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kt(ktSEXP);
    Rcpp::traits::input_parameter< int >::type kt_max(kt_maxSEXP);
    Rcpp::traits::input_parameter< int >::type kt_min(kt_minSEXP);
    rcpp_result_gen = Rcpp::wrap(ponderacao_temporal_cpp(serie_temporal, kt, kt_max, kt_min));
    return rcpp_result_gen;
END_RCPP
}
// propaga_tv_cpp
NumericVector propaga_tv_cpp(NumericVector vazao_montante, NumericVector vazao_jusante, double tempo_viagem);
RcppExport SEXP _funcaoSmapCpp_propaga_tv_cpp(SEXP vazao_montanteSEXP, SEXP vazao_jusanteSEXP, SEXP tempo_viagemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vazao_montante(vazao_montanteSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vazao_jusante(vazao_jusanteSEXP);
    Rcpp::traits::input_parameter< double >::type tempo_viagem(tempo_viagemSEXP);
    rcpp_result_gen = Rcpp::wrap(propaga_tv_cpp(vazao_montante, vazao_jusante, tempo_viagem));
    return rcpp_result_gen;
END_RCPP
}
// propaga_muskingum_cpp
NumericVector propaga_muskingum_cpp(NumericVector vazao_montante, NumericVector vazao_jusante, int n, NumericVector coeficientes);
RcppExport SEXP _funcaoSmapCpp_propaga_muskingum_cpp(SEXP vazao_montanteSEXP, SEXP vazao_jusanteSEXP, SEXP nSEXP, SEXP coeficientesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vazao_montante(vazao_montanteSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vazao_jusante(vazao_jusanteSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coeficientes(coeficientesSEXP);
    rcpp_result_gen = Rcpp::wrap(propaga_muskingum_cpp(vazao_montante, vazao_jusante, n, coeficientes));
    return rcpp_result_gen;
END_RCPP
}
// rodada_varios_dias_cpp2
NumericMatrix rodada_varios_dias_cpp2(NumericVector modelo, NumericVector inicializacao, double area, NumericVector precipitacao, NumericVector evapotranspiracao, NumericVector Emarg, int numero_dias);
RcppExport SEXP _funcaoSmapCpp_rodada_varios_dias_cpp2(SEXP modeloSEXP, SEXP inicializacaoSEXP, SEXP areaSEXP, SEXP precipitacaoSEXP, SEXP evapotranspiracaoSEXP, SEXP EmargSEXP, SEXP numero_diasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type modelo(modeloSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inicializacao(inicializacaoSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type precipitacao(precipitacaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type evapotranspiracao(evapotranspiracaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Emarg(EmargSEXP);
    Rcpp::traits::input_parameter< int >::type numero_dias(numero_diasSEXP);
    rcpp_result_gen = Rcpp::wrap(rodada_varios_dias_cpp2(modelo, inicializacao, area, precipitacao, evapotranspiracao, Emarg, numero_dias));
    return rcpp_result_gen;
END_RCPP
}
// rodada_cenarios_dias_cpp2
List rodada_cenarios_dias_cpp2(NumericVector modelo, NumericMatrix inicializacao, double area, NumericMatrix precipitacao, NumericMatrix evapotranspiracao, NumericMatrix Emarg, int numero_dias, int numero_cenarios);
RcppExport SEXP _funcaoSmapCpp_rodada_cenarios_dias_cpp2(SEXP modeloSEXP, SEXP inicializacaoSEXP, SEXP areaSEXP, SEXP precipitacaoSEXP, SEXP evapotranspiracaoSEXP, SEXP EmargSEXP, SEXP numero_diasSEXP, SEXP numero_cenariosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type modelo(modeloSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inicializacao(inicializacaoSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type precipitacao(precipitacaoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type evapotranspiracao(evapotranspiracaoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Emarg(EmargSEXP);
    Rcpp::traits::input_parameter< int >::type numero_dias(numero_diasSEXP);
    Rcpp::traits::input_parameter< int >::type numero_cenarios(numero_cenariosSEXP);
    rcpp_result_gen = Rcpp::wrap(rodada_cenarios_dias_cpp2(modelo, inicializacao, area, precipitacao, evapotranspiracao, Emarg, numero_dias, numero_cenarios));
    return rcpp_result_gen;
END_RCPP
}
// rodada_pmur_cpp
NumericMatrix rodada_pmur_cpp(NumericVector modelo, NumericVector inicializacao, double area, NumericVector precipitacao, NumericVector evapotranspiracao, NumericVector Emarg, int numero_dias);
RcppExport SEXP _funcaoSmapCpp_rodada_pmur_cpp(SEXP modeloSEXP, SEXP inicializacaoSEXP, SEXP areaSEXP, SEXP precipitacaoSEXP, SEXP evapotranspiracaoSEXP, SEXP EmargSEXP, SEXP numero_diasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type modelo(modeloSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inicializacao(inicializacaoSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type precipitacao(precipitacaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type evapotranspiracao(evapotranspiracaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Emarg(EmargSEXP);
    Rcpp::traits::input_parameter< int >::type numero_dias(numero_diasSEXP);
    rcpp_result_gen = Rcpp::wrap(rodada_pmur_cpp(modelo, inicializacao, area, precipitacao, evapotranspiracao, Emarg, numero_dias));
    return rcpp_result_gen;
END_RCPP
}
// rodada_pmur_cpp_cenario
List rodada_pmur_cpp_cenario(NumericVector modelo, NumericMatrix inicializacao, double area, NumericMatrix precipitacao, NumericMatrix evapotranspiracao, NumericMatrix Emarg, int numero_dias, int numero_cenarios);
RcppExport SEXP _funcaoSmapCpp_rodada_pmur_cpp_cenario(SEXP modeloSEXP, SEXP inicializacaoSEXP, SEXP areaSEXP, SEXP precipitacaoSEXP, SEXP evapotranspiracaoSEXP, SEXP EmargSEXP, SEXP numero_diasSEXP, SEXP numero_cenariosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type modelo(modeloSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inicializacao(inicializacaoSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type precipitacao(precipitacaoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type evapotranspiracao(evapotranspiracaoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Emarg(EmargSEXP);
    Rcpp::traits::input_parameter< int >::type numero_dias(numero_diasSEXP);
    Rcpp::traits::input_parameter< int >::type numero_cenarios(numero_cenariosSEXP);
    rcpp_result_gen = Rcpp::wrap(rodada_pmur_cpp_cenario(modelo, inicializacao, area, precipitacao, evapotranspiracao, Emarg, numero_dias, numero_cenarios));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_funcaoSmapCpp_ponderacao_temporal_cenario_cpp", (DL_FUNC) &_funcaoSmapCpp_ponderacao_temporal_cenario_cpp, 4},
    {"_funcaoSmapCpp_ponderacao_temporal_cpp", (DL_FUNC) &_funcaoSmapCpp_ponderacao_temporal_cpp, 4},
    {"_funcaoSmapCpp_propaga_tv_cpp", (DL_FUNC) &_funcaoSmapCpp_propaga_tv_cpp, 3},
    {"_funcaoSmapCpp_propaga_muskingum_cpp", (DL_FUNC) &_funcaoSmapCpp_propaga_muskingum_cpp, 4},
    {"_funcaoSmapCpp_rodada_varios_dias_cpp2", (DL_FUNC) &_funcaoSmapCpp_rodada_varios_dias_cpp2, 7},
    {"_funcaoSmapCpp_rodada_cenarios_dias_cpp2", (DL_FUNC) &_funcaoSmapCpp_rodada_cenarios_dias_cpp2, 8},
    {"_funcaoSmapCpp_rodada_pmur_cpp", (DL_FUNC) &_funcaoSmapCpp_rodada_pmur_cpp, 7},
    {"_funcaoSmapCpp_rodada_pmur_cpp_cenario", (DL_FUNC) &_funcaoSmapCpp_rodada_pmur_cpp_cenario, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_funcaoSmapCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
